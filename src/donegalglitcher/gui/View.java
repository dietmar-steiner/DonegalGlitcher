/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * View.java
 *
 * Created on 19-Nov-2011, 14:53:29
 */
package donegalglitcher.gui;

import image.PartEvent;
import image.Image;
import image.ImagePart;
import image.PartListener;
import image.gui.ImagePartPropertyPanel;
import image.gui.ImageTreeItem;
import donegalglitcher.action.Actions;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Dietmar
 */
public class View extends javax.swing.JFrame implements PartListener {

    private Image image = new Image();
    static private View instance = null;

    /**
     * Creates new form View
     */
    private View() {
        initComponents();
        imageTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jScrollPane1.addComponentListener(imagePanel);
        statusPanel.setProgressVisible(false);
        fileMenu.add(Actions.LOAD.getMenuItem());
        fileMenu.add(Actions.RESET.getMenuItem());
        fileMenu.add(Actions.SAVE.getMenuItem());
        fileMenu.add(Actions.EXIT.getMenuItem());
        toolsMenu.add(Actions.RANDOMIZE.getMenuItem());
        optionsMenu.add(Actions.AUTOSCALE.getMenuItem());
        addImageToTree(image.getTree(instance));
    }

    /**
     *
     * @return this instance of the View
     */
    static public View getInstance() {
        if (instance == null) {
            instance = new View();
        }
        return instance;
    }

    /**
     * Returns the Image Object
     *
     * @return the ImageObject
     */
    public Image getImage() {
        return image;
    }

    /**
     *
     * @param text
     */
    public void setStatus(String text) {
        statusPanel.setText(text);
    }

    /**
     *
     * @param current
     * @param min
     * @param max
     */
    public void setStatus(int current, int min, int max) {
        statusPanel.setProgress(current, min, max);
    }

    /**
     * returns the Status Panel contained within this view
     *
     * @return the status panel
     */
    public StatusPanel getStatusPanel() {
        return statusPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        imageTree = new image.gui.ImageTreeControl();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        imagePanel = new image.gui.ImagePanel();
        statusPanel = new donegalglitcher.gui.StatusPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        toolsMenu = new javax.swing.JMenu();
        optionsMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DonegalGlitcher");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(800, 800));

        jPanel2.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setResizeWeight(0.1);

        jSplitPane2.setDividerLocation(300);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(0.5);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        imageTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        imageTree.setRootVisible(false);
        jScrollPane2.setViewportView(imageTree);

        jSplitPane2.setLeftComponent(jScrollPane2);

        jPanel1.setPreferredSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 245, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(jPanel1);

        jSplitPane2.setRightComponent(jScrollPane3);

        jSplitPane1.setLeftComponent(jSplitPane2);

        imagePanel.setAutoscrolls(true);
        imagePanel.setMinimumSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 609, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(imagePanel);

        jSplitPane1.setRightComponent(jScrollPane1);

        jPanel2.add(jSplitPane1, java.awt.BorderLayout.CENTER);
        jPanel2.add(statusPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic(java.awt.event.KeyEvent.VK_F);
        fileMenu.setText("File");
        jMenuBar1.add(fileMenu);

        toolsMenu.setText("Tools");
        jMenuBar1.add(toolsMenu);

        optionsMenu.setText("Options");
        jMenuBar1.add(optionsMenu);

        setJMenuBar(jMenuBar1);

        getAccessibleContext().setAccessibleName("imageGlitcherView");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private image.gui.ImagePanel imagePanel;
    private image.gui.ImageTreeControl imageTree;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JMenu optionsMenu;
    private donegalglitcher.gui.StatusPanel statusPanel;
    private javax.swing.JMenu toolsMenu;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @param image
     */
    public void setDisplayImage(Image image) {
        imagePanel.setImage(image);
        imagePanel.invalidate();
    }

    /**
     *
     * @param loaded
     */
    public void setImageLoaded(boolean loaded) {
        Actions.SAVE.setEnabled(loaded);
    }

    /**
     *
     * @param changed
     */
    public void setImageChanged(boolean changed) {
        Actions.RESET.setEnabled(changed);
        TreePath path = imageTree.getSelectionPath();
        if (path != null) {
            setPropertyPanel(((ImageTreeItem) ((DefaultMutableTreeNode) path.getLastPathComponent()).getUserObject()).getPropertyPanel());
        }
        imagePanel.setImage(image);
        if (path != null) {
            imageTree.setSelectionPath(path);
        }
    }

    /**
     *
     */
    public void toggleImageAutoscale() {
        imagePanel.toggleAutoscale();
    }

    /**
     *
     * @param propertyPanel
     */
    public void setPropertyPanel(ImagePartPropertyPanel propertyPanel) {
        jScrollPane3.setViewportView(propertyPanel);
        pack();
        invalidate();
    }

    /**
     *
     * @param imageNode
     */
    public void addImageToTree(DefaultMutableTreeNode imageNode) {
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) imageTree.getModel().getRoot();
        root.removeAllChildren();
        if (null != imageNode) {
            root.add(imageNode);
        }
        ((DefaultTreeModel) imageTree.getModel()).nodeStructureChanged(root);
        imageTree.expandPath(new javax.swing.tree.TreePath(imageNode.getPath()));
    }

    /**
     *
     */
    public void randomize() {
        ImageTreeItem item = (ImageTreeItem) ((DefaultMutableTreeNode) imageTree.getSelectionPath().getLastPathComponent()).getUserObject();
        TreePath path = imageTree.getSelectionPath();
        if (item.canBeRandomized()) {
            item.randomize();
        }
    }

    /**
     *
     * @param event
     */
    @Override
    public void dataChanged(PartEvent event) {
        System.out.println("View Datachange event: " + event.getPart());
        TreePath path = imageTree.getSelectionPath();
        if (((DefaultMutableTreeNode) path.getLastPathComponent()).getUserObject() == event.getPart()) {
            setPropertyPanel(event.getPart().getPropertyPanel());
        }
        setImageChanged(true);
    }
}
